# ðŸ¤– CLAUDE CONTEXT FILE - TheCaves Roguelite Project

## Project Overview
**Game**: Top-down roguelite (Brotato/Vampire Survivors/Halls of Torment style)  
**Team**: Miles (code lead) + Jade (art lead) - beiden doen code & art  
**Repository**: https://github.com/AirMile/TheCaves  
**Local Directory**: C:\gameProjects\TheCaves  
**Engine**: Godot 4.3  
**Language**: GDScript  
**Target**: 60 FPS with 100+ enemies  

## Directory Structure
```
C:\gameProjects\TheCaves\
â”œâ”€â”€ Notes\                    # Obsidian documentation vault
â”‚   â”œâ”€â”€ HOME.md              # Central dashboard
â”‚   â”œâ”€â”€ README.md            # Documentation overview
â”‚   â”œâ”€â”€ 00_START\            # Quick start & project info
â”‚   â”œâ”€â”€ 01_Design\           # Game design documents
â”‚   â”œâ”€â”€ 02_Development\      # Development tracking
â”‚   â”œâ”€â”€ 03_Team\             # Team workspaces
â”‚   â”‚   â”œâ”€â”€ Miles\           # Miles workspace
â”‚   â”‚   â”œâ”€â”€ Jade\            # Jade workspace
â”‚   â”‚   â””â”€â”€ Shared\          # Shared decisions
â”‚   â”œâ”€â”€ 04_Meetings\         # Meeting notes
â”‚   â”œâ”€â”€ 05_References\       # External references
â”‚   â”œâ”€â”€ 06_Development_Guides\  # Technical guides
â”‚   â””â”€â”€ 07_Templates\        # Document templates
â”œâ”€â”€ scenes\                   # Godot scene files
â”œâ”€â”€ scripts\                  # GDScript files
â”œâ”€â”€ assets\                   # Art, audio, resources
â””â”€â”€ project.godot            # Godot project file
```

## Technical Principles

### Architecture
- **Component-based design** (composition over inheritance)
- **Object pooling** for all spawnable objects
- **LOD system** for performance at scale
- **State machines** for complex behaviors
- **Event bus** for decoupled communication
- **Multiplayer-ready** structure (future possibility)

### Performance Standards
- **Target**: 60 FPS with 100+ enemies on screen
- **Memory**: < 500MB RAM usage
- **Draw calls**: < 100 per frame
- **Load time**: < 3 seconds
- **Platform**: PC primary, Steam Deck compatible

### Code Standards
```gdscript
# Static typing always
var health: int = 100
var velocity: Vector2 = Vector2.ZERO

# Component architecture
@onready var health_component: HealthComponent = $HealthComponent

# Small functions (<20 lines)
# Clear naming conventions
# No magic numbers
```

### Art Standards
- **Resolution**: 32x32 baseline (with variations)
- **Style**: Neon cave paintings on dark background
- **Format**: PNG with transparency
- **Animation**: 4-8 frames typical
- **Palette**: Consistent neon colors

## Workflow Principles

### Git Workflow
- **Branches**: feature/[name] â†’ main
- **Commits**: Conventional format (feat/fix/docs/perf)
- **Reviews**: PR before merging
- **Public repo**: Required for Claude Code access

### Documentation
- **Obsidian vault**: All project documentation
- **Markdown format**: For compatibility
- **Templates**: For consistent updates
- **Living documents**: Regular updates expected

### Collaboration
- **GitHub Issues**: Task tracking
- **Discord**: Team communication
- **Feature branches**: Parallel development
- **Code reviews**: Quality assurance

## Tools & Integration

### Development Tools
- **Engine**: Godot 4.3
- **IDE**: VS Code with Godot extensions
- **Version Control**: Git/GitHub
- **Documentation**: Obsidian
- **Art Creation**: Aseprite/Krita

### AI Assistance
- **Claude Desktop**: Planning, problem-solving
- **Claude Code**: Implementation assistance
- **MCP Integration**: Filesystem, GitHub, Context7
- **Speech-to-text**: Voicy (may have errors)

### MCP Configuration
- **Filesystem**: File operations in project directory
- **GitHub**: Repository management
- **Context7**: Documentation lookups
- **Note**: Auto-correct speech-to-text errors when present

## Development Guidelines

### When Creating Features
1. Consider performance impact (100+ enemies)
2. Use component architecture
3. Implement object pooling where applicable
4. Test with keyboard AND controller
5. Structure for potential multiplayer
6. Update relevant documentation

### When Fixing Issues
1. Check existing guides first
2. Profile performance impact
3. Test edge cases
4. Document solution
5. Update troubleshooting guides

### When Adding Art
1. Follow resolution standards
2. Test glow shader impact
3. Maintain style consistency
4. Optimize file sizes
5. Use proper naming conventions

## Key References
- **Quick Start**: Notes/00_START/START_HIER.md
- **Design Doc**: Notes/01_Design/Game_Design_Document.md
- **Art Bible**: Notes/01_Design/Art_Bible.md
- **Performance**: Notes/06_Development_Guides/Performance_Guidelines.md
- **Git Workflow**: Notes/06_Development_Guides/Git_Workflow.md

## For Claude/Claude Code

### Always Consider
- Performance at scale (100+ enemies)
- Component-based solutions
- Godot 4.3 best practices
- GDScript static typing
- Object pooling requirements
- Documentation updates

### Response Approach
- Write complete, functional code
- Explain performance implications
- Suggest optimizations
- Follow project structure
- Update relevant docs

### Language Note
- Technical terms in English
- Explanations can be in Dutch
- Code comments in English
- Documentation flexible

---
*Project: TheCaves - Roguelite Game*
*This context file provides project structure and principles*
*For current status, check HOME.md and Current_Sprint.md*