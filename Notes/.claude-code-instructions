# ü§ñ CLAUDE CODE INSTRUCTIONS - TheCaves Project

## Project Context
You are Claude Code, an autonomous coding assistant for TheCaves - a Godot 4.3 roguelite game. Generate COMPLETE, FUNCTIONAL code and handle implementation tasks independently.

## Project Constants
```yaml
Game: Top-down roguelite (Brotato/Vampire Survivors style)
Repository: https://github.com/AirMile/TheCaves
Local: C:\gameProjects\TheCaves
Engine: Godot 4.3
Language: GDScript
Performance Target: 60 FPS with 100+ enemies
Architecture: Component-based, multiplayer-ready
```

## Core Responsibilities
- Write production-ready code
- Optimize for performance at scale
- Implement complete features
- Follow established patterns
- Ship working solutions

## Code Standards

### GDScript Requirements
```gdscript
# ALWAYS use static typing
var health: int = 100
var velocity: Vector2 = Vector2.ZERO
var enemy_ref: Enemy = null

# Explicit return types
func take_damage(amount: int) -> void:
    health -= amount

func get_nearest_enemy() -> Enemy:
    return nearest_enemy

# Component architecture
@onready var health_component: HealthComponent = $HealthComponent
@onready var movement_component: MovementComponent = $MovementComponent

# Constants over magic numbers
const MAX_HEALTH: int = 100
const MOVE_SPEED: float = 300.0
```

### Naming Conventions
```
Scripts: snake_case.gd
Scenes: PascalCase.tscn
Resources: snake_case.tres
Components: ComponentNameComponent.gd
Autoloads: ManagerName.gd
```

### Directory Organization
```
C:\gameProjects\TheCaves\
‚îú‚îÄ‚îÄ scenes/
‚îÇ   ‚îú‚îÄ‚îÄ player/
‚îÇ   ‚îú‚îÄ‚îÄ enemies/
‚îÇ   ‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ levels/
‚îÇ   ‚îî‚îÄ‚îÄ components/
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ player/
‚îÇ   ‚îú‚îÄ‚îÄ enemies/
‚îÇ   ‚îú‚îÄ‚îÄ systems/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ autoload/
‚îÇ   ‚îî‚îÄ‚îÄ utilities/
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îú‚îÄ‚îÄ sprites/
‚îÇ   ‚îú‚îÄ‚îÄ audio/
‚îÇ   ‚îú‚îÄ‚îÄ shaders/
‚îÇ   ‚îî‚îÄ‚îÄ fonts/
‚îî‚îÄ‚îÄ resources/
    ‚îú‚îÄ‚îÄ upgrades/
    ‚îú‚îÄ‚îÄ items/
    ‚îî‚îÄ‚îÄ enemy_configs/
```

## Performance Patterns

### Object Pooling (MANDATORY)
```gdscript
# Required for ALL spawnable objects:
# - Enemies (200+ pool size)
# - Projectiles (500+ pool size)  
# - Particles (100+ pool size)
# - Damage numbers
# - Audio players
# - Any frequently created/destroyed objects

extends Node
class_name ObjectPool

var pool: Array = []
const DEFAULT_POOL_SIZE: int = 100

func _ready() -> void:
    _initialize_pool()

func _initialize_pool() -> void:
    # Pre-instantiate objects
    pass

func get_object() -> Node:
    # Return inactive or reuse oldest
    pass

func return_object(obj: Node) -> void:
    # Deactivate and return to pool
    pass
```

### LOD (Level of Detail) System
```gdscript
# Required for all enemies and complex objects
enum LOD { FULL, HIGH, MEDIUM, LOW, MINIMAL }

# Distance thresholds
const LOD_DISTANCES = {
    LOD.FULL: 300,
    LOD.HIGH: 600,
    LOD.MEDIUM: 900,
    LOD.LOW: 1200,
    LOD.MINIMAL: INF
}

# Feature toggles per LOD
# FULL: Everything enabled
# HIGH: No shadows/complex particles
# MEDIUM: Simplified AI, basic animations
# LOW: Movement only, no animations
# MINIMAL: Position interpolation only
```

### Physics Layers
```gdscript
# Layer configuration (NO enemy-enemy collision!)
# Layer 1: Walls/Environment
# Layer 2: Player
# Layer 3: Enemies (mask: 1|2 only!)
# Layer 4: Player projectiles
# Layer 5: Enemy projectiles  
# Layer 6: Pickups/Items
# Layer 7: Triggers/Areas

# Enemy setup example
func _ready():
    collision_layer = 3
    collision_mask = 1 | 2  # Walls and Player only!
```

## Architecture Patterns

### Component System Template
```gdscript
# Component base
extends Node
class_name BaseComponent

@export var enabled: bool = true
var owner_node: Node

func _ready() -> void:
    owner_node = get_parent()

# Specific component example
extends BaseComponent
class_name HealthComponent

signal died
signal health_changed(new_health: int)
signal damage_taken(amount: int)

@export var max_health: int = 100
var current_health: int

func take_damage(amount: int) -> void:
    if not enabled:
        return
    current_health = max(0, current_health - amount)
    damage_taken.emit(amount)
    health_changed.emit(current_health)
    if current_health <= 0:
        died.emit()
```

### State Machine Template
```gdscript
# State machine
extends Node
class_name StateMachine

@export var initial_state: State
var current_state: State
var states: Dictionary = {}

func _ready():
    for child in get_children():
        if child is State:
            states[child.name] = child
            child.state_machine = self
    
    if initial_state:
        current_state = initial_state
        current_state.enter()

func transition_to(state_name: String) -> void:
    if not states.has(state_name):
        return
    
    if current_state:
        current_state.exit()
    
    current_state = states[state_name]
    current_state.enter()
```

### Event Bus Pattern
```gdscript
# Autoload singleton
extends Node

# Game events
signal enemy_spawned(enemy: Enemy)
signal enemy_died(enemy: Enemy)
signal wave_started(wave_number: int)
signal wave_completed(wave_number: int)

# Player events
signal player_damaged(amount: int)
signal player_died()
signal ability_used(ability_name: String)

# System events
signal upgrade_collected(upgrade: Resource)
signal performance_warning(fps: int)
```

## Implementation Checklist

### For ANY New Feature
- [ ] Object pooling implemented (if spawnable)
- [ ] LOD system integrated (if enemy/complex)
- [ ] Component architecture used
- [ ] Performance tested (100+ enemies)
- [ ] Memory leaks checked
- [ ] Input works (keyboard + controller)
- [ ] Multiplayer structure considered
- [ ] Documentation updated

### Performance Validation
```gdscript
# Add to any system for validation
func _ready():
    if OS.is_debug_build():
        print("System: %s" % name)
        print("- FPS: %d" % Engine.get_frames_per_second())
        print("- Enemies: %d" % get_tree().get_nodes_in_group("enemies").size())
        print("- Memory: %.2f MB" % (OS.get_static_memory_usage() / 1048576.0))
```

## Anti-Patterns to AVOID

```gdscript
# ‚ùå NEVER: Create in loops without pooling
for i in 100:
    var bullet = bullet_scene.instantiate()

# ‚ùå NEVER: Get nodes every frame
func _process(delta):
    var player = get_node("/root/Game/Player")

# ‚ùå NEVER: String concatenation in process
func _process(delta):
    label.text = "Score: " + str(score)

# ‚ùå NEVER: Ignore typing
var health = 100  # Missing type

# ‚ùå NEVER: Direct node dependencies
var player = $"../../../Player"  # Fragile path
```

## Correct Patterns

```gdscript
# ‚úÖ ALWAYS: Use pools
var bullet = ProjectilePool.get_projectile()

# ‚úÖ ALWAYS: Cache references
@onready var player: Player = get_tree().get_first_node_in_group("player")

# ‚úÖ ALWAYS: Efficient strings
const SCORE_FORMAT: String = "Score: %d"
label.text = SCORE_FORMAT % score

# ‚úÖ ALWAYS: Static typing
var health: int = 100

# ‚úÖ ALWAYS: Use signals/groups
signal player_found(player: Player)
```

## Response Format

```markdown
## Implemented: [Feature Name]

### Files Created/Modified:
- `path/to/file.gd` - [Purpose]
- `path/to/scene.tscn` - [Purpose]

### Architecture:
- Components used: [List]
- Pooling: [Yes/No, pool size]
- LOD: [Yes/No, levels]

### Performance:
- Tested with: [X] enemies
- FPS impact: [Stable/Minor/Major]
- Memory: [+X MB]

### Usage Example:
```gdscript
# How to use this feature
```

### Next Steps:
- [Optimization opportunities]
- [Future enhancements]
```

## Debug Commands

```gdscript
# Performance monitoring
print("FPS: ", Engine.get_frames_per_second())
print("Draw calls: ", RenderingServer.get_rendering_info(RenderingServer.RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME))
print("Enemy count: ", get_tree().get_nodes_in_group("enemies").size())
print("Memory MB: ", OS.get_static_memory_usage() / 1048576.0)

# Profiler settings
ProjectSettings.set_setting("debug/settings/profiler/max_functions", 10000)
```

## Context7 Documentation Access

For accurate Godot 4.3 documentation and code examples:
```markdown
# Primary source (13,000+ examples)
Library ID: /godotengine/godot-docs
Trust Score: 9.9
Use for: GDScript syntax, API reference, best practices

# Engine source (implementation details)
Library ID: /godotengine/godot
Version: 4.3-stable
Use for: Understanding internals, performance patterns

# Demo projects (practical examples)
Library ID: /godotengine/godot-demo-projects
Use for: Complete implementation patterns
```

### When to use Context7:
- Verify GDScript syntax for Godot 4.3
- Find performance optimization patterns
- Check best practices for specific features
- Get complete code examples
- Understand engine internals

### Example usage:
```markdown
When implementing a feature:
1. Check /godotengine/godot-docs for API reference
2. Look at /godotengine/godot-demo-projects for examples
3. Verify performance patterns in /godotengine/godot source
```

## CORE DIRECTIVES
1. **Performance is mandatory** - Not optional
2. **Complete code only** - No placeholders
3. **Component architecture** - Always
4. **Object pooling** - From start
5. **Test at scale** - 100+ enemies
6. **Static typing** - No exceptions
7. **Verify with Context7** - Use godot-docs for accuracy

---

*You are Claude Code for TheCaves project.*
*Generate complete, optimized, production-ready code.*
*Performance is not negotiable.*
*Use Context7 for accurate Godot 4.3 documentation.*